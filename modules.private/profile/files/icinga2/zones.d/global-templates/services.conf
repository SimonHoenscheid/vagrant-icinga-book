apply Service "ping4" {
  import "generic-service"

  check_command = "icmp"

  assign where host.address
}

apply Service "ping6" {
  import "generic-service"

  check_command = "ping6"

  assign where host.address6
}

apply Service "ssh" {
  import "generic-service"

  check_command = "ssh"

  assign where (host.address || host.address6) && host.vars.os == "Linux"
}

apply Service for (http_vhost => config in host.vars.http_vhosts) {
  import "generic-service"

  check_command = "http"

  vars += config
}




apply Service "icinga" {
  import "generic-service"

  check_command = "icinga"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}

apply Service "cluster zone" {
  import "generic-service"

  check_command = "cluster-zone"

  assign where host.vars.os == "Linux"
  assign where host.vars.os == "Windows"
  ignore where host.vars.noagent
}

apply Service for (disk => config in host.vars.disks) {
  import "generic-service"

  check_command = "disk"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
  ignore where typeof(config) != Dictionary
}

apply Service "load" {
  import "generic-service"

  check_command = "load"
  command_endpoint = host.name

  /* Used by the ScheduledDowntime apply rule in `downtimes.conf`. */
  vars.backup_downtime = "02:00-03:00"

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "procs" {
  import "generic-service"

  check_command = "procs"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "swap" {
  import "generic-service"

  check_command = "swap"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service "ntp" {
  import "generic-service"

  check_command = "ntp_time"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
  ignore where host.vars.ntp_address == host.address
}

apply Service "ntp peers" {
  import "generic-service"

  check_command = "ntp_peer"
  //command_endpoint = host.name

  assign where host.vars.os == "Linux" && host.vars.ntp_address == host.address
  //ignore where host.vars.noagent
}

apply Service "nslookup" {
  import "generic-service"

  check_command = "dns"
  command_endpoint = host.name

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service for (db => config in host.vars.pgsql) {
  import "generic-service"

  check_command = "pgsql"
  command_endpoint = host.name

  vars += config

  assign where host.vars.os == "Linux"
  ignore where host.vars.noagent
}

apply Service for (db => config in host.vars.postgres) {
  import "generic-service"

  check_command = "postgres"

  vars += config

  assign where host.vars.os == "Linux"
}
